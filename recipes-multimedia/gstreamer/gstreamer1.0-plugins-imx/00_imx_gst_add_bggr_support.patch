Index: git/src/v4l2src/v4l2src.c
===================================================================
--- git.orig/src/v4l2src/v4l2src.c	2016-01-26 07:33:59.305110291 -0600
+++ git/src/v4l2src/v4l2src.c	2016-01-26 08:26:32.681067443 -0600
@@ -33,6 +33,7 @@
 #include "v4l2_buffer_pool.h"
 
 #define DEFAULT_CAPTURE_MODE 0
+#define DEFAULT_CAPTURE_FORMAT 0
 #define DEFAULT_FRAMERATE_NUM 30
 #define DEFAULT_FRAMERATE_DEN 1
 #define DEFAULT_INPUT 1
@@ -43,6 +44,7 @@
 {
 	IMX_V4L2SRC_0,
 	IMX_V4L2SRC_CAPTURE_MODE,
+	IMX_V4L2SRC_CAPTURE_FORMAT,
 	IMX_V4L2SRC_FRAMERATE_NUM,
 	IMX_V4L2SRC_INPUT,
 	IMX_V4L2SRC_DEVICE,
@@ -98,17 +100,13 @@
 		}
 	}
 
-	fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
-	if (ioctl(fd_v4l, VIDIOC_G_FMT, &fmt) < 0) {
-		GST_ERROR_OBJECT(v4l2src, "VIDIOC_G_FMT failed");
-		close(fd_v4l);
-		return -1;
-	}
-
 	GST_DEBUG_OBJECT(v4l2src, "pixelformat = %d  field = %d", fmt.fmt.pix.pixelformat, fmt.fmt.pix.field);
 
 	fszenum.index = v4l2src->capture_mode;
-	fszenum.pixel_format = fmt.fmt.pix.pixelformat;
+	fszenum.pixel_format =
+		(v4l2src->capture_format == DEFAULT_CAPTURE_FORMAT ?
+			V4L2_PIX_FMT_YUV420 : V4L2_PIX_FMT_SBGGR8);
+
 	if (ioctl(fd_v4l, VIDIOC_ENUM_FRAMESIZES, &fszenum) < 0) {
 		GST_ERROR_OBJECT(v4l2src, "VIDIOC_ENUM_FRAMESIZES failed: %s", strerror(errno));
 		close(fd_v4l);
@@ -136,13 +134,11 @@
 		close(fd_v4l);
 		return -1;
 	}
-	/* Get the actual frame period if possible */
-	if (parm.parm.capture.capability & V4L2_CAP_TIMEPERFRAME) {
-		v4l2src->fps_n = parm.parm.capture.timeperframe.denominator;
-		v4l2src->fps_d = parm.parm.capture.timeperframe.numerator;
-	}
 
 	fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+	fmt.fmt.pix.pixelformat =
+		(v4l2src->capture_format == DEFAULT_CAPTURE_FORMAT ?
+			V4L2_PIX_FMT_YUV420 : V4L2_PIX_FMT_SBGGR8);
 	fmt.fmt.pix.bytesperline = 0;
 	fmt.fmt.pix.priv = 0;
 	fmt.fmt.pix.sizeimage = 0;
@@ -288,8 +284,8 @@
 	const gchar *pixel_format = NULL;
 	const gchar *interlace_mode = "progressive";
 	struct v4l2_format fmt;
-
-	fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+ 
+    fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
 	if (ioctl(GST_IMX_FD_OBJECT_GET_FD(v4l2src->fd_obj_v4l), VIDIOC_G_FMT, &fmt) < 0) {
 		GST_ERROR_OBJECT(v4l2src, "VIDIOC_G_FMT failed");
 		return FALSE;
@@ -302,6 +298,9 @@
 	case V4L2_PIX_FMT_YUYV: /* Special Case for handling YUYV */
 		pixel_format = "YUY2";
 		break;
+    case V4L2_PIX_FMT_SBGGR8: /* Special Case for handling SBGGR8 */
+		pixel_format = "bggr";
+		break;
 	default:
 		gst_fmt = gst_video_format_from_fourcc(fmt.fmt.pix.pixelformat);
 		pixel_format = gst_video_format_to_string(gst_fmt);
@@ -312,7 +311,8 @@
 
 	/* not much to negotiate;
 	 * we already performed setup, so that is what will be streamed */
-	caps = gst_caps_new_simple("video/x-raw",
+    if (v4l2src->capture_format == DEFAULT_CAPTURE_FORMAT) {
+	    caps = gst_caps_new_simple("video/x-raw",
 			"format", G_TYPE_STRING, pixel_format,
 			"width", G_TYPE_INT, v4l2src->capture_width,
 			"height", G_TYPE_INT, v4l2src->capture_height,
@@ -320,6 +320,17 @@
 			"framerate", GST_TYPE_FRACTION, v4l2src->fps_n, v4l2src->fps_d,
 			"pixel-aspect-ratio", GST_TYPE_FRACTION, 1, 1,
 			NULL);
+    }
+	else {
+		caps = gst_caps_new_simple("video/x-bayer",
+				"format", G_TYPE_STRING, pixel_format,
+				"width", G_TYPE_INT, v4l2src->capture_width,
+				"height", G_TYPE_INT, v4l2src->capture_height,
+                "interlace-mode", G_TYPE_STRING, interlace_mode,
+				"framerate", GST_TYPE_FRACTION, v4l2src->fps_n, v4l2src->fps_d,
+				"pixel-aspect-ratio", GST_TYPE_FRACTION, 1, 1,
+				NULL);
+	}
 
 	GST_INFO_OBJECT(src, "negotiated caps %" GST_PTR_FORMAT, (gpointer)caps);
 
@@ -335,7 +346,8 @@
 
 	GST_INFO_OBJECT(v4l2src, "get caps filter %" GST_PTR_FORMAT, (gpointer)filter);
 
-	caps = gst_caps_new_simple("video/x-raw",
+    if (v4l2src->capture_format == DEFAULT_CAPTURE_FORMAT) {
+	    caps = gst_caps_new_simple("video/x-raw",
 			"format", G_TYPE_STRING, pixel_format,
 			"width", GST_TYPE_INT_RANGE, 16, G_MAXINT,
 			"height", GST_TYPE_INT_RANGE, 16, G_MAXINT,
@@ -343,6 +355,18 @@
 			"framerate", GST_TYPE_FRACTION_RANGE, 0, 1, 100, 1,
 			"pixel-aspect-ratio", GST_TYPE_FRACTION_RANGE, 0, 1, 100, 1,
 			NULL);
+	}
+	else {
+		caps = gst_caps_new_simple("video/x-bayer",
+				"format", G_TYPE_STRING, "bggr",
+				"width", GST_TYPE_INT_RANGE, 16, G_MAXINT,
+				"height", GST_TYPE_INT_RANGE, 16, G_MAXINT,
+                "interlace-mode", G_TYPE_STRING, interlace_mode,
+				"framerate", GST_TYPE_FRACTION_RANGE, 0, 1, 100, 1,
+				"pixel-aspect-ratio", GST_TYPE_FRACTION_RANGE, 0, 1, 100, 1,
+				NULL);
+	}
+
 
 	GST_INFO_OBJECT(v4l2src, "get caps %" GST_PTR_FORMAT, (gpointer)caps);
 
@@ -369,6 +393,10 @@
 			v4l2src->capture_mode = g_value_get_int(value);
 			break;
 
+		case IMX_V4L2SRC_CAPTURE_FORMAT:
+			v4l2src->capture_format = g_value_get_int(value);
+			break;
+
 		case IMX_V4L2SRC_FRAMERATE_NUM:
 			v4l2src->fps_n = g_value_get_int(value);
 			break;
@@ -404,6 +432,10 @@
 			g_value_set_int(value, v4l2src->capture_mode);
 			break;
 
+		case IMX_V4L2SRC_CAPTURE_FORMAT:
+			g_value_set_int(value, v4l2src->capture_format);
+			break;
+
 		case IMX_V4L2SRC_FRAMERATE_NUM:
 			g_value_set_int(value, v4l2src->fps_n);
 			break;
@@ -429,6 +461,7 @@
 static void gst_imx_v4l2src_init(GstImxV4l2VideoSrc *v4l2src)
 {
 	v4l2src->capture_mode = DEFAULT_CAPTURE_MODE;
+	v4l2src->capture_format = DEFAULT_CAPTURE_FORMAT;
 	v4l2src->fps_n = DEFAULT_FRAMERATE_NUM;
 	v4l2src->fps_d = DEFAULT_FRAMERATE_DEN;
 	v4l2src->input = DEFAULT_INPUT;
@@ -468,6 +501,14 @@
 				0, G_MAXINT, DEFAULT_CAPTURE_MODE,
 				G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
 
+	g_object_class_install_property(gobject_class, IMX_V4L2SRC_CAPTURE_FORMAT,
+			g_param_spec_int("capture-format", "Capture format",
+				"Capture format of camera,\n"
+				"\t\t\t\tI420 = 0,\n"
+				"\t\t\t\tBAYER_BGGR8 = 1,\n",
+				0, 1, DEFAULT_CAPTURE_FORMAT,
+				G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+
 	g_object_class_install_property(gobject_class, IMX_V4L2SRC_FRAMERATE_NUM,
 			g_param_spec_int("fps-n", "FPS numerator",
 				"Numerator of the framerate at which"
Index: git/src/v4l2src/v4l2src.h
===================================================================
--- git.orig/src/v4l2src/v4l2src.h	2016-01-26 07:33:59.305110291 -0600
+++ git/src/v4l2src/v4l2src.h	2016-01-26 07:33:59.277110292 -0600
@@ -53,6 +53,7 @@
 
 	/* properties */
 	gint capture_mode;
+	gint capture_format;
 	gint fps_n;
 	gint fps_d;
 	gint input;
