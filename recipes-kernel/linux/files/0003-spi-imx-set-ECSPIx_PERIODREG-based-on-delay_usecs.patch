From 54a680bc629d80ef3f50f7931d62efe1807f19ce Mon Sep 17 00:00:00 2001
From: Matt Sarnoff <matt@glowforge.com>
Date: Thu, 28 May 2020 23:43:40 -0700
Subject: [PATCH] spi-imx: set ECSPIx_PERIODREG based on delay_usecs

This allows the insertion of additional delays between words.
Mutually exclusive with dynamic burst. PERIODREG inserts wait states
between bursts, therefore the burst size gets fixed to the word size in
cases where delay_usecs != 0.

From linux-glowforge b03593f84c0d3ae05e3d5f19a6c34420b6e76b48
---
 drivers/spi/spi-imx.c | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/drivers/spi/spi-imx.c b/drivers/spi/spi-imx.c
index 91e32291c44e..566284df971d 100644
--- a/drivers/spi/spi-imx.c
+++ b/drivers/spi/spi-imx.c
@@ -278,6 +278,9 @@ static bool spi_imx_can_dma(struct spi_master *master, struct spi_device *spi,
 #define MX51_ECSPI_STAT		0x18
 #define MX51_ECSPI_STAT_RR		(1 <<  3)
 
+#define MX51_ECSPI_PERIODREG	0x1c
+#define MX51_ECSPI_PERIODREG_SAMPLE_PERIOD(p)	((p) & 0x7fff)
+
 #define MX51_ECSPI_TESTREG	0x20
 #define MX51_ECSPI_TESTREG_LBC	BIT(31)
 
@@ -578,6 +581,7 @@ static int mx51_ecspi_prepare_transfer(struct spi_imx_data *spi_imx,
 {
 	u32 ctrl = readl(spi_imx->base + MX51_ECSPI_CTRL);
 	u32 clk = t->speed_hz, delay;
+	u32 period, num_wait_states;
 
 	/* Clear BL field and set the right value */
 	ctrl &= ~MX51_ECSPI_CTRL_BL_MASK;
@@ -607,6 +611,10 @@ static int mx51_ecspi_prepare_transfer(struct spi_imx_data *spi_imx,
 
 	writel(ctrl, spi_imx->base + MX51_ECSPI_CTRL);
 
+	num_wait_states = (t->delay_usecs * clk) / 1000000;
+	period = MX51_ECSPI_PERIODREG_SAMPLE_PERIOD(num_wait_states);
+	writel(period, spi_imx->base + MX51_ECSPI_PERIODREG);
+
 	/*
 	 * Wait until the changes in the configuration register CONFIGREG
 	 * propagate into the hardware. It takes exactly one tick of the
@@ -1246,8 +1254,11 @@ static int spi_imx_setupxfer(struct spi_device *spi,
 	 * Initialize the functions for transfer. To transfer non byte-aligned
 	 * words, we have to use multiple word-size bursts, we can't use
 	 * dynamic_burst in that case.
+	 * Also cannot use dynamic burst if an inter-byte delay has been
+	 * explicitly specified with delay_usecs.
 	 */
 	if (spi_imx->devtype_data->dynamic_burst && !spi_imx->slave_mode &&
+	    (t->delay_usecs == 0) &&
 	    (spi_imx->bits_per_word == 8 ||
 	    spi_imx->bits_per_word == 16 ||
 	    spi_imx->bits_per_word == 32)) {
-- 
2.17.1

