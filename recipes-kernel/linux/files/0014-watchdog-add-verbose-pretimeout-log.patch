From 914147f2516a9622f2f7b7fe15dfc953f7ab5015 Mon Sep 17 00:00:00 2001
From: Matt Sarnoff <matt@glowforge.com>
Date: Mon, 1 Feb 2021 00:48:26 -0800
Subject: [PATCH] watchdog: add verbose pretimeout log

---
 drivers/watchdog/imx2_wdt.c         | 10 ++++++++--
 drivers/watchdog/pretimeout_panic.c | 30 ++++++++++++++++++++++++++++-
 drivers/watchdog/watchdog_dev.c     |  4 ++++
 include/linux/watchdog.h            |  1 +
 4 files changed, 42 insertions(+), 3 deletions(-)

diff --git a/drivers/watchdog/imx2_wdt.c b/drivers/watchdog/imx2_wdt.c
index 8d019a961ccc..436cd763d84d 100644
--- a/drivers/watchdog/imx2_wdt.c
+++ b/drivers/watchdog/imx2_wdt.c
@@ -252,6 +252,7 @@ static int __init imx2_wdt_probe(struct platform_device *pdev)
 	void __iomem *base;
 	int ret;
 	u32 val;
+	u32 pretimeout = 0;
 
 	wdev = devm_kzalloc(&pdev->dev, sizeof(*wdev), GFP_KERNEL);
 	if (!wdev)
@@ -308,6 +309,11 @@ static int __init imx2_wdt_probe(struct platform_device *pdev)
 		set_bit(WDOG_HW_RUNNING, &wdog->status);
 	}
 
+	of_property_read_u32(pdev->dev.of_node,
+					"fsl,pretimeout-sec",
+					&pretimeout);
+	imx2_wdt_set_pretimeout(wdog, pretimeout);
+
 	/*
 	 * Disable the watchdog power down counter at boot. Otherwise the power
 	 * down counter will pull down the #WDOG interrupt line for one clock
@@ -319,8 +325,8 @@ static int __init imx2_wdt_probe(struct platform_device *pdev)
 	if (ret)
 		goto disable_clk;
 
-	dev_info(&pdev->dev, "timeout %d sec (nowayout=%d)\n",
-		 wdog->timeout, nowayout);
+	dev_info(&pdev->dev, "timeout %d sec (pretimeout %d sec, nowayout=%d)\n",
+		 wdog->timeout, wdog->pretimeout, nowayout);
 
 	return 0;
 
diff --git a/drivers/watchdog/pretimeout_panic.c b/drivers/watchdog/pretimeout_panic.c
index 2cc3c41d2be5..1922f47592d9 100644
--- a/drivers/watchdog/pretimeout_panic.c
+++ b/drivers/watchdog/pretimeout_panic.c
@@ -6,9 +6,11 @@
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/watchdog.h>
-
+#include <linux/sched/signal.h>
 #include "watchdog_pretimeout.h"
 
+#define VERBOSE_PRETIMEOUT 1
+
 /**
  * pretimeout_panic - Panic on watchdog pretimeout event
  * @wdd - watchdog_device
@@ -17,7 +19,33 @@
  */
 static void pretimeout_panic(struct watchdog_device *wdd)
 {
+#if VERBOSE_PRETIMEOUT
+	/* dump thread list, stack, etc. and panic */
+	struct task_struct *process, *task;
+	volatile int *bad = (int *)0xded;
+	pid_t opened_pid = wdd->opened_pid;
+	console_verbose();
+	if (opened_pid != 0) {
+		printk(KERN_EMERG "Watchdog pre-timeout "
+			"(/dev/watchdog opened by pid %d)\n",
+			opened_pid);
+	} else {
+		printk(KERN_EMERG "Watchdog pre-timeout "
+			"(/dev/watchdog was not open)\n");
+	}
+	printk(KERN_EMERG "Thread list: (name tgid pid state)\n");
+	rcu_read_lock();
+	for_each_process_thread(process, task) {
+		printk(KERN_EMERG "%c %-16s %d %d %ld\n",
+			(task->pid == opened_pid) ? '*' : ' ',
+			task->comm, task->tgid, task->pid, task->state);
+	}
+	rcu_read_unlock();
+	/* forcing a page fault instead of calling panic() is more verbose */
+	*bad = 1;
+#else
 	panic("watchdog pretimeout event\n");
+#endif
 }
 
 static struct watchdog_governor watchdog_gov_panic = {
diff --git a/drivers/watchdog/watchdog_dev.c b/drivers/watchdog/watchdog_dev.c
index dbd2ad4c9294..8353a6e3f96e 100644
--- a/drivers/watchdog/watchdog_dev.c
+++ b/drivers/watchdog/watchdog_dev.c
@@ -841,6 +841,8 @@ static int watchdog_open(struct inode *inode, struct file *file)
 	if (!hw_running)
 		kref_get(&wd_data->kref);
 
+	wdd->opened_pid = current->pid;
+
 	/*
 	 * open_timeout only applies for the first open from
 	 * userspace. Set open_deadline to infinity so that the kernel
@@ -892,6 +894,8 @@ static int watchdog_release(struct inode *inode, struct file *file)
 	if (!wdd)
 		goto done;
 
+	wdd->opened_pid = 0;
+
 	/*
 	 * We only stop the watchdog if we received the magic character
 	 * or if WDIOF_MAGICCLOSE is not set. If nowayout was set then
diff --git a/include/linux/watchdog.h b/include/linux/watchdog.h
index 417d9f37077a..397adbf1a7f8 100644
--- a/include/linux/watchdog.h
+++ b/include/linux/watchdog.h
@@ -109,6 +109,7 @@ struct watchdog_device {
 	struct notifier_block restart_nb;
 	void *driver_data;
 	struct watchdog_core_data *wd_data;
+	pid_t opened_pid;
 	unsigned long status;
 /* Bit numbers for status flags */
 #define WDOG_ACTIVE		0	/* Is the watchdog running/active */
